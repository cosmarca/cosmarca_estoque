[{guardian,[]},
 {logger,
     [{utc_log,false},
      {backends,[console]},
      {translators,[{'Elixir.Logger.Translator',translate}]},
      {sync_threshold,20},
      {handle_sasl_reports,false},
      {compile_time_purge_matching,[]},
      {discard_threshold_periodic_check,30000},
      {level,info},
      {discard_threshold,500},
      {translator_inspect_opts,[]},
      {console,
          [{level,debug},
           {format,<<"$time $metadata[$level] $message\n">>},
           {metadata,[request_id]}]},
      {start_options,[]},
      {handle_otp_reports,true},
      {compile_time_application,nil},
      {truncate,8096},
      {discard_threshold_for_error_logger,500}]},
 {phoenix_pubsub,[]},
 {idna,[]},
 {gen_stage,[]},
 {decimal,[]},
 {runtime_tools,[]},
 {eex,[]},
 {iex,
     [{inspect,[{pretty,true}]},
      {colors,[]},
      {default_prompt,<<"%prefix(%counter)>">>},
      {alive_prompt,<<"%prefix(%node)%counter>">>},
      {history_size,20}]},
 {stdlib,[]},
 {mime,[{types,#{}}]},
 {libring,[]},
 {compiler,[]},
 {telemetry,[]},
 {quantum,[]},
 {distillery,[{config_providers,[]}]},
 {gen_state_machine,[]},
 {unicode_util_compat,[]},
 {swarm,[]},
 {cowboy,[]},
 {certifi,[]},
 {public_key,[]},
 {comeonin,[]},
 {ueberauth_identity,[]},
 {plug_cowboy,[]},
 {jose,[]},
 {phoenix_html,[]},
 {db_connection,[]},
 {crontab,[]},
 {hackney,
     [{max_connections,50},
      {restart,permanent},
      {maxt,1},
      {shutdown,10000},
      {timeout,150000},
      {maxr,10}]},
 {kernel,
     [{logger,
          [{handler,default,logger_std_h,
               #{config => #{type => standard_io},
                 formatter =>
                     {logger_formatter,
                         #{legacy_header => true,single_line => false}}}}]},
      {logger_sasl_compatible,false},
      {logger_level,notice}]},
 {metrics,[]},
 {connection,[]},
 {httpoison,[]},
 {elixir,
     [{time_zone_database,'Elixir.Calendar.UTCOnlyTimeZoneDatabase'},
      {ansi_enabled,false},
      {check_endianness,true}]},
 {plug,[{validate_header_keys_during_test,true}]},
 {cosmarca_estoque,
     [{ecto_repos,['Elixir.CosmarcaEstoque.Repo']},
      {'Elixir.CosmarcaEstoque.Repo',
          [{adapter,'Elixir.Ecto.Adapters.Postgres'},
           {url,
               <<"postgres://ydghsfyq:jIGmSKiWKi5GFYIUdYqqeoAC8TAF1Dk9@drona.db.elephantsql.com:5432/ydghsfyq">>},
           {database,<<>>},
           {ssl,true},
           {pool_size,2}]},
      {'Elixir.CosmarcaEstoqueWeb.Endpoint',
          [{url,[{host,<<"localhost">>}]},
           {secret_key_base,
               <<"cK8oAozuaMMYK00Jq/ZQptZ+ba00FC3G5oijyinO9AyACezQTaiRRCJknrg7eqH3">>},
           {render_errors,
               [{view,'Elixir.CosmarcaEstoqueWeb.ErrorView'},
                {accepts,[<<"html">>,<<"json">>]}]},
           {pubsub,
               [{name,'Elixir.CosmarcaEstoque.PubSub'},
                {adapter,'Elixir.Phoenix.PubSub.PG2'}]},
           {load_from_system_env,true},
           {http,[{port,{system,<<"PORT">>}}]},
           {check_origin,false},
           {server,true},
           {root,<<".">>},
           {cache_static_manifest,<<"priv/static/cache_manifest.json">>}]},
      {'Elixir.CosmarcaEstoqueWeb.Auth.Guardian',
          [{issuer,<<"cosmarca_estoque">>},
           {secret_key,
               <<"lFp3x36MlY2xktFApHKLewZcJm4eyRD4pgLrzsGXhG4UI4VtPNzYD5qVtm907p3B">>}]}]},
 {jason,[]},
 {ssl,[]},
 {mimerl,[]},
 {phoenix,
     [{format_encoders,[]},
      {filter_parameters,[<<"password">>]},
      {serve_endpoints,false},
      {gzippable_exts,
          [<<".js">>,<<".css">>,<<".txt">>,<<".text">>,<<".html">>,
           <<".json">>,<<".svg">>,<<".eot">>,<<".ttf">>]},
      {json_library,'Elixir.Jason'},
      {stacktrace_depth,nil},
      {template_engines,[]}]},
 {sweet_xml,[]},
 {artificery,[]},
 {gettext,[{default_locale,<<"en">>}]},
 {ranch,[]},
 {ecto_sql,[{postgres_map_type,<<"jsonb">>}]},
 {asn1,[]},
 {poison,[]},
 {ssl_verify_fun,[]},
 {plug_crypto,[]},
 {postgrex,[{json_library,'Elixir.Jason'},{type_server_reap_after,180000}]},
 {sasl,[{errlog_type,error},{sasl_error_logger,false}]},
 {xmerl,[]},
 {ueberauth,[]},
 {phoenix_ecto,[{exclude_ecto_exceptions_from_plug,[]}]},
 {argon2_elixir,[]},
 {base64url,[]},
 {cowlib,[]},
 {crypto,[{rand_cache_size,896},{fips_mode,false}]},
 {mix,[{colors,[]}]},
 {ecto,[]}].
